<?php
//快递地址分析
function areaAnalysis($oriStr)
{
	$cityData = '{"安徽":["合肥","芜湖","蚌埠","淮南","马鞍山","淮北","铜陵","安庆","黄山","阜阳","宿州","滁州","六安","宣城","池州","亳州","其他"],"北京":["北京"],"重庆":["重庆"],"福建":["福州","厦门","莆田","三明","泉州","漳州","南平","龙岩","宁德","平潭","其他"],"甘肃":["兰州","嘉峪关","金昌","白银","天水","酒泉","张掖","武威","定西","陇南","平凉","庆阳","临夏回族自治州","甘南藏族自治州","其他"],"广东":["广州","深圳","珠海","汕头","佛山","韶关","湛江","肇庆","江门","茂名","惠州","梅州","汕尾","河源","阳江","清远","东莞","中山","潮州","揭阳","云浮","其他"],"广西":["南宁","柳州","桂林","梧州","北海","防城港","钦州","贵港","玉林","百色","贺州","河池","来宾","崇左","南宁","柳州","其他"],"贵州":["贵阳","六盘水","遵义","安顺","毕节","铜仁","黔西南","黔东南","黔南","其他"],"海南":["海口","三亚","三沙","儋州","其他"],"河北":["石家庄","唐山","秦皇岛","邯郸","邢台","保定","张家口","承德","沧州","廊坊","衡水","定州","辛集","其他"],"黑龙江":["哈尔滨","齐齐哈尔","鸡西","鹤岗","双鸭山","大庆","伊春","佳木斯","七台河","牡丹江","黑河","绥化","大兴安岭","绥芬河","抚远","其他"],"河南":["郑州","开封","洛阳","平顶山","安阳","鹤壁","新乡","焦作","濮阳","许昌","漯河","三门峡","南阳","商丘","周口","信阳","驻马店","济源","其他"],"湖北":["武汉","黄石","十堰","宜昌","襄阳","鄂州","荆门","孝感","荆州","黄冈","咸宁","随州","恩施土家族苗族自治州","仙桃","潜江","天门","神农架","其他"],"湖南":["长沙","株洲","湘潭","衡阳","邵阳","岳阳","常德","张家界","益阳","郴州","永州","怀化","娄底","湘西土家族苗族自治州","其他"],"内蒙古":["呼和浩特","包头","乌海","赤峰","通辽","鄂尔多斯","呼伦贝尔","巴彦淖尔","乌兰察布盟","兴安盟","锡林郭勒盟","阿拉善盟","其他"],"江苏":["南京","无锡","徐州","常州","苏州","南通","连云港","淮安","盐城","扬州","镇江","泰州","宿迁","其他"],"江西":["南昌","九江","上饶","抚州","宜春","吉安","赣州","景德镇","萍乡","新余","鹰潭","其他"],"吉林":["长春","吉林","四平","辽源","通化","白山","白城","松原","延边朝鲜族自治州","吉林省长白山保护开发区","梅河口","公主岭","其他"],"辽宁":["沈阳","大连","鞍山","抚顺","本溪","丹东","锦州","营口","阜新","辽阳","盘锦","铁岭","朝阳","葫芦岛","其他"],"宁夏":["银川","石嘴山","吴忠","固原","中卫","其他"],"青海":["西宁","海东","海北","黄南","海南","果洛","玉树","海西"],"山西":["太原","大同","阳泉","长治","晋城","朔州","晋中","运城","忻州","临汾","吕梁","其他"],"山东":["济南","青岛","淄博","枣庄","东营","烟台","潍坊","济宁","泰安","威海","日照","莱芜","临沂","德州","聊城","滨州","菏泽","其他"],"上海":["上海"],"四川":["成都","绵阳","自贡","攀枝花","泸州","德阳","广元","遂宁","内江","乐山","资阳","宜宾","南充","达州","雅安","阿坝","甘孜","凉山","眉山","广安","巴中","其他"],"天津":["天津"],"西藏":["拉萨","昌都","山南","日喀则","那曲","阿里","林芝","其他"],"新疆":["乌鲁木齐","克拉玛依","吐鲁番","哈密","阿克苏","喀什","和田","昌吉","博尔塔拉","巴音郭楞","克孜勒苏","伊犁","其他"],"云南":["昆明","曲靖","玉溪","昭通","保山","丽江","普洱","临沧","德宏","怒江","迪庆","大理","楚雄","红河","文山","西双版纳","其他"],"浙江":["杭州","宁波","温州","嘉兴","湖州","绍兴","金华","衢州","舟山","台州","丽水","其他"],"陕西":["西安","宝鸡","铜川","咸阳","渭南","延安","汉中","榆林","安康","商洛","杨凌示范区","其他"]}';
	$surnameData = '["赵","钱","孙","李","周","吴","郑","王","冯","陈","楮","卫","蒋","沈","韩","杨","朱","秦","尤","许","何","吕","施","张","孔","曹","严","华","金","魏","陶","姜","戚","谢","邹","喻","柏","水","窦","章","云","苏","潘","葛","奚","范","彭","郎","鲁","韦","昌","马","苗","凤","花","方","俞","任","袁","柳","酆","鲍","史","唐","费","廉","岑","薛","雷","贺","倪","汤","滕","殷","罗","毕","郝","邬","安","常","乐","于","时","傅","皮","卞","齐","康","伍","余","元","卜","顾","孟","平","黄","和","穆","萧","尹","姚","邵","湛","汪","祁","毛","禹","狄","米","贝","明","臧","计","伏","成","戴","谈","宋","茅","庞","熊","纪","舒","屈","项","祝","董","梁","杜","阮","蓝","闽","席","季","麻","强","贾","路","娄","危","江","童","颜","郭","梅","盛","林","刁","锺","徐","丘","骆","高","夏","蔡","田","樊","胡","凌","霍","虞","万","支","柯","昝","管","卢","莫","经","房","裘","缪","干","解","应","宗","丁","宣","贲","邓","郁","单","杭","洪","包","诸","左","石","崔","吉","钮","龚","程","嵇","邢","滑","裴","陆","荣","翁","荀","羊","於","惠","甄","麹","家","封","芮","羿","储","靳","汲","邴","糜","松","井","段","富","巫","乌","焦","巴","弓","牧","隗","山","谷","车","侯","宓","蓬","全","郗","班","仰","秋","仲","伊","宫","宁","仇","栾","暴","甘","斜","厉","戎","祖","武","符","刘","景","詹","束","龙","叶","幸","司","韶","郜","黎","蓟","薄","印","宿","白","怀","蒲","邰","从","鄂","索","咸","籍","赖","卓","蔺","屠","蒙","池","乔","阴","郁","胥","能","苍","双","闻","莘","党","翟","谭","贡","劳","逄","姬","申","扶","堵","冉","宰","郦","雍","郤","璩","桑","桂","濮","牛","寿","通","边","扈","燕","冀","郏","浦","尚","农","温","别","庄","晏","柴","瞿","阎","充","慕","连","茹","习","宦","艾","鱼","容","向","古","易","慎","戈","廖","庾","终","暨","居","衡","步","都","耿","满","弘","匡","国","文","寇","广","禄","阙","东","欧","殳","沃","利","蔚","越","夔","隆","师","巩","厍","聂","晁","勾","敖","融","冷","訾","辛","阚","那","简","饶","空","曾","毋","沙","乜","养","鞠","须","丰","巢","关","蒯","相","查","后","荆","红","游","竺","权","逑","盖","益","桓","公","万俟","司马","上官","欧阳","夏侯","诸葛","闻人","东方","赫连","皇甫","尉迟","公羊","澹台","公冶","宗政","濮阳","淳于","单于","太叔","申屠","公孙","仲孙","轩辕","令狐","锺离","宇文","长孙","慕容","鲜于","闾丘","司徒","司空","丌官","司寇","仉","督","子车","颛孙","端木","巫马","公西","漆雕","乐正","壤驷","公良","拓拔","夹谷","宰父","谷梁","晋","楚","阎","法","汝","鄢","涂","钦","段干","百里","东郭","南门","呼延","归","海","羊舌","微生","岳","帅","缑","亢","况","后","有","琴","梁丘","左丘","东门","西门","商","牟","佘","佴","伯","赏","南宫","墨","哈","谯","笪","年","爱","阳","佟","第五","言","福"]';
	$cityRes = '';
	$provinceRes = '';
	$userNameRes = '';
	$mobileRes = '';
	$addressRes = '';

	$initialStr = $oriStr;

	/*
		分析地址
		1   先找出手机号
		2   再找出省，市，详细地址
		3   剩下的认为是用户姓名
	*/
	//获取字符串中的手机号,规则：先找出字符串中连续是数字，且长度超过11的字符串,再获取到后11位，校验是否是手机号(前面几位数字有可能是详细地址最后的门牌号)
	$rule = "/\d{11,}/";
	$matchRes = preg_match($rule, $oriStr, $matchData);
	if (empty($matchRes)) {
		throw new Exception("字符串中没有11位以上的连续数字", 1);
	}

	$mobileStr = $matchData[0];
	if (strlen($mobileStr) > 11) {
		$mobileStr = substr($mobileStr, -11);
	}
	if (empty(preg_match('/^1[34578]\d{9}$/', $mobileStr))) {
		throw new Exception("手机号格式错误", 2);
	}

	$mobileRes = $mobileStr;
	//删除字符串中手机号
	$oriStr = str_replace($mobileRes, '', $oriStr);
	$oriStr = trimStr($oriStr);

	$cityData = json_decode($cityData);

	//先找到市，和市对应的省
	foreach ($cityData as $province => $citys) {
		foreach ($citys as $city) {
			if (strpos($oriStr, $city) !== false) {
				$cityRes = $city;
				$provinceRes = $province; 
			}
		}
	}
	if (empty($cityRes)) {
		throw new Exception("找不到市，地址错误", 3);
	}

	//获取市前面的字符串
	$cityfFront = mb_substr($oriStr, 0, mb_strpos($oriStr, $cityRes));
	$trimStr = trimStr($cityfFront);

	$surnameData = json_decode($surnameData);
	//市前面的字符串，认为可能包含的有:省名,姓名
	if (!empty($cityfFront)) {
		//删除字符串可能出现的对应的 省名 或者 省名+'省',如果有剩余，认为是姓名
		if (strpos($cityfFront, $provinceRes . '省') !== false) {
			$cityfFront = str_replace($provinceRes . '省', '', $cityfFront);
		} elseif (strpos($cityfFront, $provinceRes) !== false) {
			$cityfFront = str_replace($provinceRes, '', $cityfFront);
		}
		$cityfFront = trimStr($cityfFront);
		if (!empty($cityfFront) && mb_strlen($cityfFront) >= 2) {
			//判断是否是姓名
			//单姓
			$firstStr = mb_substr($cityfFront, 0, 1);
			$firstStr = trimStr($firstStr);
			if (in_array($firstStr, $surnameData) && in_array(mb_strlen($cityfFront), [2, 3, 4])) {
				$userNameRes = $cityfFront;
			}
			//复姓
			$firstSencondStr = mb_substr($cityfFront, 0, 2);
			$firstSencondStr = trimStr($firstSencondStr);
			if (in_array($firstSencondStr, $surnameData) && in_array(mb_strlen($cityfFront), [3, 4])) {
				$userNameRes = $cityfFront;
			}
			
		}
	}

	//处理市后面的字符串，去掉市名后面的第一个"市"字
	$cityfBehind = mb_substr($oriStr, mb_strpos($oriStr, $cityRes) + mb_strlen($cityRes), mb_strlen($oriStr));
	$cityfBehind = trimStr($cityfBehind);
	if (mb_substr($cityfBehind, 0, 1) == '市') {
		$cityfBehind = mb_substr($cityfBehind, 1);
		$cityfBehind = trimStr($cityfBehind);
	}

	//如果在去掉了市名称前面可能出现的省名称之后，前面还有字符串，则认为是用户姓名，同时认为市后面的所有的字符串位详细地址
	//否则，仍然需要对市后面的字符串做区分，区分出详细地址和姓名
	if (!empty($userNameRes)) {
		$addressRes = $cityfBehind;
	} else {
		//认为：如果市后面同时有详细地址和姓名，则姓名一定会在地址后面
		if (mb_strlen($cityfBehind) >= 2) {
			foreach ($surnameData as $surname) {
				if (mb_strrpos($cityfBehind, $surname) !== false) {
					$userNameData = mb_substr($cityfBehind, mb_strrpos($cityfBehind, $surname), mb_strlen($cityfBehind));
					$userNameData = trimStr($userNameData);
					//单姓
					if (mb_strlen($surname) == 1 && in_array(mb_strlen($userNameData), [2, 3, 4])) {
						$userNameRes = $userNameData;
					}
					//复姓
					if (mb_strlen($surname) == 2 && in_array(mb_strlen($userNameData), [3, 4])) {
						$userNameRes = $userNameData;
					}
				}
			}
			if (!empty($userNameRes)) {
				$addressRes = str_replace($userNameRes, '', $cityfBehind);
				$addressRes = trimStr($addressRes);
			}
		}
	}



	return [
		'initialStr' => $initialStr,
		'mobile' => $mobileRes,
		'userName' => $userNameRes,
		'province' => $provinceRes,
		'city' => $cityRes,
		'address' => $addressRes
	];
}
function mb_trim($string, $trim_chars = '\s')
{
	return preg_replace('/^['.$trim_chars.']*(?U)(.*)['.$trim_chars.']*$/u', '\\1',$string);
}

function trimStr($str)
{
	$str = mb_trim($str,"\r\r(: :)");
	$str = mb_trim($str, ',');
	$str = mb_trim($str, '，');
	$str = mb_trim($str, '.');
	$str = mb_trim($str, '。');
	return $str;
}

//test
// $area = '上官贱男兰州霍营地铁站龙锦苑东五区小区13683139188';
// $area = '李秋水  13674051538广东省深圳市南山区海德三道168号航天科技广场A座47层,   ';
$area = '天水市武山县洛门镇白泉村四组172号裘千仞13683132388';
$res = areaAnalysis($area);
var_dump($res);

?>
